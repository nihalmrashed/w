{"version":3,"sources":["components/Menu.js","components/Terminal.js","components/Login.js","components/Register.js","components/NavBar.js","components/Profile.js","components/OrderView.js","App.js","serviceWorker.js","index.js"],"names":["Menu","props","componentDidMount","a","axios","post","then","response","setState","products","data","soldout","catch","error","console","log","handleOpenModal","orderQuantities","state","x","i","isNaN","clearInputs","handleCloseModal","alert","y","length","updateOrderQuantitiesArray","showModal","orderQuantitiesArray","subTotal","handleSubmit","quantities","refs","avg","num","sum","splitStr","split","parseInt","avgTime","toFixed","start","Date","now","price","status","duration","userId","localStorage","getItem","alertString","window","location","reload","handleQuantityChange","newOrderQuantities","references","quantityArray","quantityObj","time","Object","keys","forEach","key","toString","_id","itemSubTotal","parseFloat","push","product","name","quantity","Number","handleUpArrow","e","id","target","handleDownArrow","sproducts","j","ing","sold_out","recipe","ingredientId","ingredient","stock","item","ssproducts","this","cards","map","Card","className","CardImg","top","width","src","image","alt","CardBody","CardTitle","CardSubtitle","InputGroup","Button","color","onClick","type","ref","onChange","Container","Row","CardDeck","isOpen","Table","outline","Component","Terminal","filtered","filter","o","orders","done","orderId","date","finish","cookId","prod","Col","sm","md","CardText","Login","regis","reg","login","body","email","password","pass","res","json","redirect","setItem","handleChange","event","value","to","pathname","Form","FormGroup","Label","for","Input","placeholder","fluid","size","Register","handleEmailInput","handlePasswordInput1","password1","handlePasswordInput2","password2","showLogin","redirectlogin","handleRegister","test","redirectmenu","showRegistration","NavBar","logout","clear","toggle","bind","dropDown","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","href","divider","Navbar","light","expand","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","Profile","newPassword","OrderView","ordersData","reverse","orderInfo","timeDiff","timeStatus","setInterval","tick","orderCards","order","CardHeader","tag","CardFooter","App","exact","path","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0e6d2e64.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Card,\r\n  CardImg,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Button,\r\n  Row,\r\n  Container,\r\n  Table,\r\n  CardDeck,\r\n  InputGroup\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport ReactModal from \"react-modal\";\r\nimport \"./Pages.css\";\r\n\r\nclass Menu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      products: [],\r\n      ssproducts: [],\r\n      orderQuantities: {},\r\n      orderQuantitiesArray: [],\r\n      showModal: false,\r\n      subTotal: 0,\r\n      avgTime: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount = async() => {\r\n    await axios\r\n      .post(\"https://sftst.herokuapp.com/api/product/view\", {})\r\n      .then(response => {\r\n        this.setState({ products: response.data.data });\r\n        this.soldout();\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error is \", error);\r\n      });\r\n  };\r\n\r\n  handleOpenModal = () => {\r\n    //Deleting any inputs that are 0 from the quantities state\r\n    const orderQuantities = this.state.orderQuantities;\r\n    for (let x in orderQuantities) {\r\n      if (orderQuantities[x] === \"0\") {\r\n        delete orderQuantities[x];\r\n      }\r\n    }\r\n\r\n    //Checking to see if there is any invalid input\r\n    for (let i in orderQuantities) {\r\n      if (isNaN(orderQuantities[i])) {\r\n        this.clearInputs();\r\n        this.handleCloseModal();\r\n        alert(\"Invalid input! Quantity must be a NUMBER\");\r\n        return;\r\n      }\r\n    }\r\n    //Checking to see if any input is submitted, if none, throws an error alert\r\n    for (let y in orderQuantities) {\r\n      if (orderQuantities[y].length !== 0) {\r\n        //Updates the orderQuantitiesArray with the values in the inputs\r\n        //the orderQuantitiesArray controls what is shown within the modal\r\n        this.updateOrderQuantitiesArray();\r\n        this.setState({ showModal: true });\r\n        return;\r\n      }\r\n    }\r\n    alert(\"Invalid input! You must order something to submit\");\r\n  };\r\n\r\n  handleCloseModal = () => {\r\n    this.clearInputs();\r\n    this.setState({ orderQuantitiesArray: [] });\r\n    this.setState({ orderQuantities: {} });\r\n    this.setState({ subTotal: 0 });\r\n    this.setState({ showModal: false });\r\n  };\r\n\r\n  handleSubmit = async() => {\r\n    const quantities = this.state.orderQuantities;\r\n    const references = this.refs;\r\n    let avg = 0;\r\n    let num = 0;\r\n    //preventing sending quantity items that are invalid such as 0 or nothing\r\n    for (let i in quantities) {\r\n      if (quantities[i] === \"\" || quantities[i] === \"0\") {\r\n        delete quantities[i];\r\n      }\r\n    }\r\n    for (let i in quantities) {\r\n      num += quantities[i];\r\n    }\r\n    let sum = 0;\r\n    let splitStr = num.split(\"\");\r\n\r\n    for (let i = 0; i < splitStr.length; i++) {\r\n      sum += parseInt(splitStr[i]);\r\n    }\r\n    avg = this.state.avgTime / sum;\r\n    avg.toFixed(5);\r\n    await axios\r\n      .post(\"https://sftst.herokuapp.com/api/order/create\", {\r\n        start: Date.now(),\r\n        products: this.state.orderQuantitiesArray,\r\n        price: this.state.subTotal,\r\n        status: \"submitted\",\r\n        duration: avg,\r\n        userId: localStorage.getItem(\"id\")\r\n      })\r\n      .then(response => {\r\n        //Alerting the user of their order #\r\n        const alertString =\r\n          \"Your order is submitted! Order #: \" +\r\n          response.data.data[\"_id\"] +\r\n          \"/n Your order time is \" +\r\n          avg;\r\n        alert(alertString);\r\n        this.clearInputs();\r\n        this.handleCloseModal();\r\n        window.location.reload(true);\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error is \", error);\r\n        alert(error);\r\n      });\r\n  };\r\n\r\n  handleQuantityChange = () => {\r\n    let newOrderQuantities = this.state.orderQuantities;\r\n    const references = this.refs;\r\n    //Grabbing all of the values in the different text inputs for each menu item\r\n    for (let i in references) {\r\n      newOrderQuantities[i] = references[i][\"value\"];\r\n    }\r\n    //Deleting any which are blank\r\n    for (let y in newOrderQuantities) {\r\n      if (newOrderQuantities[y].length === 0) {\r\n        delete newOrderQuantities[y];\r\n      }\r\n    }\r\n    this.setState({ orderQuantities: newOrderQuantities });\r\n  };\r\n\r\n  updateOrderQuantitiesArray = async() => {\r\n    await axios\r\n      .post(\"https://sftst.herokuapp.com/api/product/view\", {})\r\n      .then(response => {\r\n        const quantityArray = [];\r\n        const quantityObj = this.state.orderQuantities;\r\n        let time = 0;\r\n        Object.keys(quantityObj).forEach(function(key) {\r\n          for (let i = 0; i < response.data.data.length; i++) {\r\n            if (key.toString() === response.data.data[i]._id.toString()) {\r\n              const itemSubTotal = parseFloat(\r\n                response.data.data[i].price * quantityObj[key]\r\n              ).toFixed(2);\r\n              time += response.data.data[i].time * quantityObj[key];\r\n              const ref = \"item\" + key;\r\n              quantityArray.push({\r\n                product: response.data.data[i]._id,\r\n                name: response.data.data[i].name,\r\n                quantity: quantityObj[key],\r\n                itemSubTotal: itemSubTotal\r\n              });\r\n            }\r\n          }\r\n        });\r\n        let subTotal = 0;\r\n        for (let x = 0; x < quantityArray.length; x++) {\r\n          subTotal += Number.parseFloat(quantityArray[x].itemSubTotal);\r\n        }\r\n        subTotal.toFixed(2);\r\n        this.setState({ subTotal: subTotal });\r\n        this.setState({ avgTime: time });\r\n        this.setState({ orderQuantitiesArray: quantityArray });\r\n      })\r\n      .catch(error => {});\r\n  };\r\n\r\n  //Clears all of the inputs\r\n  clearInputs = () => {\r\n    const mains = this.state.products;\r\n    //Clearing out all of the text boxes\r\n    for (let i in this.refs) {\r\n      this.refs[i][\"value\"] = \"\";\r\n    }\r\n  };\r\n\r\n  handleUpArrow = e => {\r\n    const id = e.target.name;\r\n    const quantities = this.state.orderQuantities;\r\n    for (let i in this.refs) {\r\n      if (i === id) {\r\n        if (\r\n          this.refs[i][\"value\"].length === 0 ||\r\n          isNaN(this.refs[i][\"value\"])\r\n        ) {\r\n          this.refs[i][\"value\"] = \"1\";\r\n          quantities[i] = \"1\";\r\n          this.setState({ orderQuantities: quantities });\r\n        } else if (this.refs[i][\"value\"] >= 0) {\r\n          let quantity = parseInt(this.refs[i][\"value\"]);\r\n          quantity++;\r\n          this.refs[i][\"value\"] = quantity.toString();\r\n          quantities[i] = quantity.toString();\r\n          this.setState({ orderQuantities: quantities });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  handleDownArrow = e => {\r\n    const id = e.target.name;\r\n    const quantities = this.state.orderQuantities;\r\n    for (let i in this.refs) {\r\n      if (i === id) {\r\n        if (\r\n          this.refs[i][\"value\"].length === 0 ||\r\n          this.refs[i][\"value\"] === \"0\" ||\r\n          isNaN(this.refs[i][\"value\"])\r\n        ) {\r\n          this.refs[i][\"value\"] = \"0\";\r\n          quantities[i] = \"0\";\r\n          this.setState({ orderQuantities: quantities });\r\n        } else {\r\n          let quantity = parseInt(this.refs[i][\"value\"]);\r\n          quantity--;\r\n          this.refs[i][\"value\"] = quantity.toString();\r\n          quantities[i] = quantity.toString();\r\n          this.setState({ orderQuantities: quantities });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  soldout = async () => {\r\n    let products = this.state.products;\r\n    let sproducts = [];\r\n    for (let j in products) {\r\n      let ing;\r\n      var sold_out = false;\r\n      for (let i = 0; i < !sold_out && products[j].recipe.length; i += 1) {\r\n        await axios\r\n          .post(\"https://sftst.herokuapp.com/api/ingredient/viewbyID\", {\r\n            ingredientId: products[j].recipe[i].ingredient\r\n          })\r\n          .then(response => {\r\n            ing = response.data.data;\r\n          })\r\n          .catch(error => {\r\n            console.log(\"error is \", error);\r\n          });\r\n\r\n        if (products[j].recipe[i].quantity > ing.stock) {\r\n          sold_out = true;\r\n        }\r\n      }\r\n      sproducts[j] = { item: products[j], sold_out: sold_out };\r\n    }\r\n    this.setState({ ssproducts: sproducts });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.ssproducts) {\r\n      let cards = this.state.ssproducts.map(item => {\r\n        if (!item.sold_out) {\r\n          return (\r\n            <Card className=\"card\">\r\n              <CardImg\r\n                className=\"img-adjusted\"\r\n                top\r\n                width=\"100%\"\r\n                src={item.item.image}\r\n                alt=\"Card image cap\"\r\n              />\r\n\r\n              <CardBody>\r\n                <CardTitle>{item.item.name}</CardTitle>\r\n                <CardSubtitle>${item.item.price}</CardSubtitle>\r\n              </CardBody>\r\n              <form id={item.item._id}>\r\n                <div className=\"arrow-buttons\">\r\n                  <InputGroup>\r\n                    <Button\r\n                      color=\"secondary\"\r\n                      className=\"up-button\"\r\n                      onClick={this.handleUpArrow}\r\n                      name={item.item._id}\r\n                    >\r\n                      +\r\n                    </Button>\r\n                    <input\r\n                      type=\"text\"\r\n                      name={item.item._id}\r\n                      ref={item.item._id}\r\n                      onChange={this.handleQuantityChange}\r\n                      className=\"form-control\"\r\n                    />\r\n                    <Button\r\n                      color=\"secondary\"\r\n                      className=\"down-button\"\r\n                      onClick={this.handleDownArrow}\r\n                      name={item.item._id}\r\n                    >\r\n                      -\r\n                    </Button>\r\n                  </InputGroup>\r\n                </div>\r\n              </form>\r\n            </Card>\r\n          );\r\n        }\r\n        if (item.sold_out) {\r\n          return (\r\n            <Card className=\"card\">\r\n              <CardImg\r\n                className=\"img-adjusted\"\r\n                top\r\n                width=\"100%\"\r\n                src={item.item.image}\r\n                alt=\"Card image cap\"\r\n              />\r\n              <CardBody>\r\n                <CardTitle>{item.item.name}</CardTitle>\r\n                <CardSubtitle>${item.item.price}</CardSubtitle>\r\n                <CardSubtitle className=\"sold-out-notification\">\r\n                  SOLD OUT\r\n                </CardSubtitle>\r\n              </CardBody>\r\n            </Card>\r\n          );\r\n        }\r\n      });\r\n      return (\r\n        <div>\r\n          <h2>Menu</h2>\r\n          <Container>\r\n            <Row>\r\n              <CardDeck className=\"card-deck\">{cards}</CardDeck>\r\n            </Row>\r\n          </Container>\r\n\r\n          <ReactModal isOpen={this.state.showModal}>\r\n            <h1>Confirm your order</h1>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Item</th>\r\n                  <th>Quantity</th>\r\n                  <th>Item Subtotal</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.orderQuantitiesArray.map(item => (\r\n                  <tr>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.quantity}</td>\r\n                    <td>${item.itemSubTotal}</td>\r\n                  </tr>\r\n                ))}\r\n                <th>SubTotal: ${this.state.subTotal.toFixed(2)}</th>\r\n                <th></th>\r\n                <th></th>\r\n              </tbody>\r\n            </Table>\r\n            <Button onClick={this.handleCloseModal}>Cancel</Button>{\" \"}\r\n            <Button onClick={this.handleSubmit}>Submit!</Button>\r\n          </ReactModal>\r\n          <br />\r\n          <Button\r\n            outline\r\n            color=\"danger\"\r\n            className=\"submit-button\"\r\n            onClick={this.handleOpenModal}\r\n          >\r\n            Submit Order\r\n          </Button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div></div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  CardDeck,\r\n  Row,\r\n  Col,\r\n  Button\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport \"./Pages.css\";\r\n\r\nclass Terminal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      orders: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    axios\r\n      .post(\"https://sftst.herokuapp.com/api/order/view\", {})\r\n      .then(response => {\r\n        let filtered = response.data.data.filter(o => o.status !== \"finished\");\r\n        this.setState({ orders: filtered });\r\n        console.log(this.state.orders);\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error is \", error);\r\n      });\r\n  };\r\n\r\n  done = e => {\r\n    axios\r\n      .post(\"https://sftst.herokuapp.com/api/order/log\", {\r\n        orderId: e.target.id,\r\n        price: e.price,\r\n        date: e.date,\r\n        finish: Date.now(),\r\n        products: e.products\r\n      })\r\n      .then()\r\n      .catch(error => {\r\n        console.log(\"error is \", error);\r\n        alert(error);\r\n      });\r\n    axios\r\n      .post(\"https://sftst.herokuapp.com/api/order/update\", {\r\n        orderId: e.target.id,\r\n        finish: Date.now(),\r\n        status: \"finished\",\r\n        cookId: localStorage.getItem(\"id\")\r\n      })\r\n      .then(response => {\r\n        window.location.reload(true);\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error is \", error);\r\n        alert(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    let cards = this.state.orders.map(item => {\r\n      let prod = item.products.map(e => e.quantity + \"x \" + e.name);\r\n      return (\r\n        <Col sm={3} md={4}>\r\n          <Card className=\"card\">\r\n            <CardBody>\r\n              <CardTitle>{item.start}</CardTitle>\r\n              <CardSubtitle>{item._id}</CardSubtitle>\r\n              <CardText>Products: {prod}</CardText>\r\n              <Button onClick={this.done} id={item._id}>\r\n                Done!\r\n              </Button>\r\n            </CardBody>\r\n          </Card></Col>\r\n      );\r\n    });\r\n    if(this.state.orders.length!==0){\r\n    return (\r\n      <Container className=\"gap\">\r\n        <Row>\r\n          <CardDeck className=\"card-deck\">{cards}</CardDeck>\r\n        </Row>\r\n      </Container>\r\n    );}else{ return (\r\n      <div>\r\n        <h2>No On-going Orders</h2>\r\n      </div>\r\n    );}\r\n  }\r\n}\r\n\r\nexport default Terminal;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Col\r\n} from \"reactstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"./Pages.css\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      pass: \"\",\r\n      type: \"\",\r\n      redirect: false,\r\n      reg: false\r\n    };\r\n  }\r\n  regis = () => {\r\n    this.setState({ reg: true });\r\n  };\r\n\r\n  login = async () => {\r\n    const body = {\r\n      email: this.state.email,\r\n      password: this.state.pass\r\n    };\r\n    await axios\r\n      .post(\r\n        \"https://sftst.herokuapp.com/api/user/login\",\r\n        body,\r\n        (\"Access-Control-Allow-Headers\",\r\n        \"Origin, X-Requested-With, Content-Type, Accept\")\r\n      )\r\n      .then(res => res.data)\r\n      .then(json => {\r\n        console.log(json);\r\n\r\n        this.setState({\r\n          redirect: true,\r\n          type: json.data.type\r\n        });\r\n        localStorage.setItem(\"email\", json.data.email);\r\n        localStorage.setItem(\"password\", json.data.password);\r\n        localStorage.setItem(\"type\", json.data.type);\r\n        localStorage.setItem(\"id\", json.data._id);\r\n        window.location.reload(true);\r\n      })\r\n      .catch(error => {\r\n        alert(\"Wrong password or email\");\r\n      });\r\n  };\r\n\r\n  handleChange = name => event => {\r\n    this.setState({\r\n      [name]: event.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.redirect) {\r\n      if (this.state.type === \"user\") {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/user`,\r\n              state: {\r\n                email: this.state.email,\r\n                password: this.state.pass,\r\n                type: this.state.type\r\n              }\r\n            }}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/cook`,\r\n              state: {\r\n                email: this.state.email,\r\n                password: this.state.pass,\r\n                type: this.state.type\r\n              }\r\n            }}\r\n          />\r\n        );\r\n      }\r\n    } else {\r\n      if (this.state.reg) {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/`\r\n            }}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <div>\r\n            <h2 className=\"p\">Login to order!</h2>\r\n            <Container className=\"center\">\r\n              <Form className=\"login-form\">\r\n                <Col>\r\n                  <br></br>\r\n                  <FormGroup>\r\n                    <Label for=\"exampleEmail\"></Label>\r\n                    <Input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      value={this.state.value}\r\n                      onChange={this.handleChange(\"email\")}\r\n                      id=\"exampleEmail\"\r\n                      placeholder=\"E-mail address\"\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"examplePassword\"></Label>\r\n                    <Input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      value={this.state.value}\r\n                      onChange={this.handleChange(\"pass\")}\r\n                      id=\"examplePassword\"\r\n                      placeholder=\"Password\"\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Button color=\"danger\" fluid size=\"large\" onClick={this.login}>\r\n                  Login\r\n                </Button>{\" \"}\r\n                <Button color=\"danger\" fluid size=\"large\" onClick={this.regis}>\r\n                  Register\r\n                </Button>\r\n              </Form>\r\n            </Container>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Col\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password1: \"\",\r\n      password2: \"\",\r\n      showRegistration: false,\r\n      redirectmenu: false,\r\n      redirectlogin: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  handleEmailInput = event => {\r\n    this.setState({ email: event.target.value });\r\n  };\r\n\r\n  handlePasswordInput1 = event => {\r\n    this.setState({ password1: event.target.value });\r\n  };\r\n\r\n  handlePasswordInput2 = event => {\r\n    this.setState({ password2: event.target.value });\r\n  };\r\n\r\n  showLogin = () => {\r\n    this.setState({ redirectlogin: true });\r\n  };\r\n\r\n  handleRegister = async(event) => {\r\n    if (\r\n      !/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(this.state.email)\r\n    ) {\r\n      alert(\"Not valid email format\");\r\n    }\r\n\r\n    if (this.state.password1 === this.state.password2) {\r\n      await axios\r\n        .post(\"https://sftst.herokuapp.com/api/user/register\", {\r\n          email: this.state.email,\r\n          password: this.state.password1,\r\n          type: \"user\"\r\n        })\r\n        .then(response => {\r\n          localStorage.setItem(\"email\", response.data.email);\r\n          localStorage.setItem(\"password\", response.data.password);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          this.setState({ redirectmenu: true });\r\n        })\r\n        .catch(error => {\r\n          alert(\"User already exists\");\r\n        });\r\n    } else {\r\n      alert(\"Passwords don't match\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.redirectmenu) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/user`,\r\n            state: {\r\n              email: this.state.email,\r\n              password: this.state.pass,\r\n              type: this.state.type\r\n            }\r\n          }}\r\n        />\r\n      );\r\n    } else {\r\n      if (this.state.redirectlogin) {\r\n        return (\r\n          <Redirect\r\n            to={{\r\n              pathname: `/login`\r\n            }}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <div>\r\n            <h2 className=\"p\">Register</h2>\r\n            <Container className=\"center\">\r\n              <Form className=\"signin-form\">\r\n                <Col>\r\n                  <br></br>\r\n                  <FormGroup>\r\n                    <Label for=\"exampleEmail\"> </Label>\r\n                    <Input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      value={this.state.value}\r\n                      onChange={this.handleEmailInput}\r\n                      id=\"exampleEmail\"\r\n                      placeholder=\"E-mail address\"\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"password1\"> </Label>\r\n                    <Input\r\n                      type=\"password\"\r\n                      name=\"password1\"\r\n                      value={this.state.value}\r\n                      onChange={this.handlePasswordInput1}\r\n                      id=\"password1\"\r\n                      placeholder=\"Password\"\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col>\r\n                  <FormGroup>\r\n                    <Label for=\"password2\"> </Label>\r\n                    <Input\r\n                      type=\"password\"\r\n                      name=\"password2\"\r\n                      value={this.state.value}\r\n                      onChange={this.handlePasswordInput2}\r\n                      id=\"password2\"\r\n                      placeholder=\"Confirm Password\"\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Button\r\n                  color=\"danger\"\r\n                  fluid\r\n                  size=\"large\"\r\n                  onClick={this.handleRegister}\r\n                >\r\n                  Register\r\n                </Button>\r\n                {\"  \"}\r\n                <Button\r\n                  color=\"danger\"\r\n                  fluid\r\n                  size=\"large\"\r\n                  onClick={this.showLogin}\r\n                >\r\n                  Login\r\n                </Button>\r\n              </Form>\r\n            </Container>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Register;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nclass NavBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false,\r\n      location: \"\"\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  logout = () => {\r\n    localStorage.clear();\r\n    window.location.reload(true);\r\n  };\r\n\r\n  render() {\r\n    console.log(localStorage);\r\n    let dropDown = null;\r\n    if (localStorage.getItem(\"type\") === \"user\") {\r\n      dropDown = (\r\n        <UncontrolledDropdown nav inNavbar>\r\n          <DropdownToggle nav caret>\r\n            <FontAwesome className=\"super-crazy-colors\" name=\"edit\" />\r\n          </DropdownToggle>\r\n          <DropdownMenu right>\r\n            <DropdownItem href=\"/user\">Menu</DropdownItem>\r\n            <DropdownItem href=\"/order\">Orders</DropdownItem>\r\n            <DropdownItem href=\"/profile\">Change Password</DropdownItem>\r\n            <DropdownItem divider />\r\n            <DropdownItem href=\"/\"onClick={this.logout}>Logoff</DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      );\r\n    } else if (localStorage.getItem(\"type\") === \"cook\") {\r\n      dropDown = (\r\n        <UncontrolledDropdown nav inNavbar>\r\n          <DropdownToggle nav caret>\r\n            <FontAwesome className=\"super-crazy-colors\" name=\"edit\" />\r\n          </DropdownToggle>\r\n          <DropdownMenu right>\r\n            <DropdownItem href=\"/cook\">Orders</DropdownItem>\r\n            <DropdownItem href=\"/profile\">Change Password</DropdownItem>\r\n            <DropdownItem divider />\r\n            <DropdownItem href=\"/\" onClick={this.logout}>Log Out</DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Navbar color=\"grey\" className=\"navbar-dark bg-dark\" light expand=\"md\">\r\n          <NavbarBrand>The Noodle Box</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink>{localStorage.getItem(\"email\")}</NavLink>\r\n              </NavItem>\r\n              {dropDown}\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    ); \r\n  }\r\n}\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Container,\r\n  Col,\r\n  Button,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Redirect\r\n} from \"react-router-dom\";\r\n\r\nclass Profile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      done: false,\r\n      password1: \"\",\r\n      password2: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  handlePasswordInput1 = event => {\r\n    this.setState({ password1: event.target.value });\r\n  };\r\n\r\n  handlePasswordInput2 = event => {\r\n    this.setState({ password2: event.target.value });\r\n  };\r\n\r\n  handleSubmit = async(event) => {\r\n    if (this.state.password1 === this.state.password2) {\r\n      await axios\r\n        .post(\"https://sftst.herokuapp.com/api/user/password\", {\r\n          userId: localStorage.getItem(\"id\"),\r\n          password: localStorage.getItem(\"password\"),\r\n          newPassword: this.state.password1\r\n        })\r\n        .then(response => {\r\n          localStorage.setItem(\"password\", this.state.password1);\r\n          this.setState({ done: true });\r\n        })\r\n        .catch(error => {\r\n          console.log(\"error! \", error);\r\n        });\r\n    } else {\r\n      alert(\"Passwords don't match\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.done) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: `/user`\r\n          }}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h2 className=\"p\">Change Password</h2>\r\n          <Container className=\"center\">\r\n            <Form className=\"login-form\">\r\n              <Col>\r\n                <br></br>\r\n                <FormGroup>\r\n                  <Label for=\"password1\"></Label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    name=\"password1\"\r\n                    value={this.state.value}\r\n                    onChange={this.handlePasswordInput1}\r\n                    id=\"password1\"\r\n                    placeholder=\"Password\"\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              <Col>\r\n              <FormGroup>\r\n                <Label for=\"password2\"></Label>\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"password2\"\r\n                  value={this.state.value}\r\n                  onChange={this.handlePasswordInput2}\r\n                  id=\"password2\"\r\n                  placeholder=\"Confirm Password\"\r\n                />\r\n              </FormGroup></Col>\r\n              <Button\r\n                color=\"danger\"\r\n                fluid=\"true\"\r\n                size=\"large\"\r\n                onClick={this.handleSubmit}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Form>\r\n          </Container>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default Profile;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Table,\r\n  CardHeader,\r\n  CardFooter,\r\n  CardDeck\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport {\r\n  HashRouter,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  BrowserRouter,\r\n  browserHistory,\r\n  Redirect,\r\n  withRouter\r\n} from \"react-router-dom\";\r\n\r\nimport \"./Pages.css\";\r\n\r\nclass OrderView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      orders: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await axios\r\n      .post(\"https://sftst.herokuapp.com/api/order/view\", {})\r\n      .then(response => {\r\n        console.log(response.data.data);\r\n        let ordersData = response.data.data\r\n          .filter(o => o.userId === localStorage.getItem(\"id\"))\r\n          .reverse();\r\n        this.setState({ orders: ordersData });\r\n      });\r\n    await axios\r\n      .post(\"https://sftst.herokuapp.com/api/order/diff\", {\r\n        orders: this.state.orders\r\n      })\r\n      .then(response => {\r\n        const orderInfo = this.state.orders;\r\n        for (let i = 0; i < response.data.data.length; i++) {\r\n          for (let y = 0; y < orderInfo.length; y++) {\r\n            //Assiging the time diff to the order\r\n            if (\r\n              parseInt(response.data.data[i]._id) === parseInt(orderInfo[y]._id)\r\n            ) {\r\n              orderInfo[y].timeDiff = response.data.data[i].timeDiff;\r\n              //Assigning a class to the time left span depending on how much time is left on the order\r\n              if (response.data.data[i].timeDiff === 0) {\r\n                orderInfo[y].timeStatus = \"time-up\";\r\n              } else if (\r\n                response.data.data[i].timeDiff === 2 ||\r\n                response.data.data[i].timeDiff === 1\r\n              ) {\r\n                orderInfo[y].timeStatus = \"two-minute-warning\";\r\n              } else {\r\n                orderInfo[y].timeStatus = \"pending\";\r\n              }\r\n            }\r\n          }\r\n        }\r\n        this.setState({ orders: orderInfo });\r\n      });\r\n    console.log(this.state.orders);\r\n    setInterval(() => this.tick(), 60000);\r\n  };\r\n\r\n  //De-incrementing all of the orders, this is run every minute\r\n  tick = () => {\r\n    const orders = this.state.orders;\r\n    for (let i = 0; i < orders.length; i++) {\r\n      //If the time is not up yet, tick down one minute\r\n      if (orders[i].timeDiff !== 0) {\r\n        orders[i].timeDiff--;\r\n        //Setting appropriate time status\r\n        if (orders[i].timeDiff === 0) {\r\n          orders[i].timeStatus = \"time-up\";\r\n        } else if (orders[i].timeDiff === 2) {\r\n          orders[i].timeStatus = \"two-minute-warning\";\r\n        }\r\n      }\r\n    }\r\n    this.setState({ orders: orders });\r\n  };\r\n\r\n  render() {\r\n    if (!localStorage.getItem(\"id\")) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    console.log(this.state.orders);\r\n    let orderCards = this.state.orders.map(order => {\r\n      if (order.status !== \"finished\") {\r\n        return (\r\n          <Col sm={2} md={4}>\r\n            <Card className=\"card\">\r\n              <CardHeader tag=\"h3\">Order # {order._id}</CardHeader>\r\n              <CardBody>\r\n                <CardText>Expected Finish Time: {order.finish}</CardText>\r\n                <CardText>\r\n                  <span className={order.timeStatus}>\r\n                    Time left: {order.timeDiff} minutes\r\n                  </span>\r\n                </CardText>\r\n                <Table>\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Item</th>\r\n                      <th>Quantity</th>\r\n                      <th>Item total price</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {order.products.map(item => (\r\n                      <tr>\r\n                        <td>{item.name}</td>\r\n                        <td>{item.quantity}</td>\r\n                        <td>{item.itemSubTotal}</td>\r\n                      </tr>\r\n                    ))}\r\n                  </tbody>\r\n                </Table>\r\n              </CardBody>\r\n              <CardFooter>Total order price: ${order.price}</CardFooter>\r\n            </Card>\r\n          </Col>\r\n        );\r\n      } else {\r\n        return (\r\n          <Card className=\"card\">\r\n            <CardHeader tag=\"h3\">Order # {order._id}</CardHeader>\r\n            <CardBody>\r\n              <CardText>Finish time: {order.finish}</CardText>\r\n              <CardText>\r\n                <span className=\"finished\">Order finished</span>\r\n              </CardText>\r\n              <Table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>Item</th>\r\n                    <th>Quantity</th>\r\n                    <th>Item total price</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {order.products.map(item => (\r\n                    <tr>\r\n                      <td>{item.name}</td>\r\n                      <td>{item.quantity}</td>\r\n                      <td>{item.itemSubTotal}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </Table>\r\n            </CardBody>\r\n            <CardFooter>Total order price: ${order.price}</CardFooter>\r\n          </Card>\r\n        );\r\n      }\r\n    });\r\n    if (this.state.orders.length !== 0) {\r\n      return (\r\n        <div>\r\n          <h2>Your Orders!</h2>\r\n          <Container>\r\n            <Row>\r\n              <CardDeck className=\"card-deck\">{orderCards}</CardDeck>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h2>No Past Orders</h2>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default OrderView;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Menu from \"./components/Menu\";\r\nimport Terminal from \"./components/Terminal\";\r\nimport Login from \"./components/Login\";\r\nimport Register from \"./components/Register\";\r\nimport Navbar from \"./components/NavBar\";\r\nimport Profile from \"./components/Profile\";\r\nimport Order from \"./components/OrderView\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <div className=\"main\">\r\n          <BrowserRouter>\r\n            <Switch>\r\n              <Route exact path=\"/\" render={props => <Register {...props} />} />\r\n              <Route\r\n                exact\r\n                path=\"/profile\"\r\n                render={props => <Profile {...props} />}\r\n              /><Route\r\n              exact\r\n              path=\"/order\"\r\n              render={props => <Order {...props} />}\r\n            />\r\n              <Route exact path=\"/user\" render={props => <Menu {...props} />} />\r\n              <Route\r\n                exact\r\n                path=\"/cook\"\r\n                render={props => <Terminal {...props} />}\r\n              />\r\n              <Route\r\n                exact\r\n                path=\"/login\"\r\n                render={props => <Login {...props} />}\r\n              />\r\n            </Switch>\r\n          </BrowserRouter>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}